name: Build and Deploy Services

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  detect-changes:
    name: Detect Service Changes
    runs-on: ubuntu-latest
    outputs:
      user_service: ${{ steps.filter.outputs.user_service }}
      notification_service: ${{ steps.filter.outputs.notification_service }}
      routing_service: ${{ steps.filter.outputs.routing_service }}
      traffic_service: ${{ steps.filter.outputs.traffic_service }}
      web_service: ${{ steps.filter.outputs.web_service }}
      kafka: ${{ steps.filter.outputs.kafka }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            user_service:
              - 'user_service/**'
            notification_service:
              - 'notification_service/**'
            routing_service:
              - 'routing_service/**'
            traffic_service:
              - 'traffic_service/**'
            web_service:
              - 'web_service/**'
            kafka:
              - 'kafka/**'

  build-user-service:
    name: Build and Deploy User Service
    needs: detect-changes
    if: needs.detect-changes.outputs.user_service == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./user_service
          file: ./user_service/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/user-service:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/user-service:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/user-service:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/user-service:buildcache,mode=max

      - name: Copy docker-compose.yml and docker-entrypoint.sh to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./user_service/docker-compose.yml, ./user_service/docker-entrypoint.sh"
          target: "~/traffic_demo/"

      - name: Deploy to server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            mkdir -p ~/traffic_demo/user_service
            cd ~/traffic_demo/user_service
            cat > .env <<EOF
            SECRET_KEY=${{ vars.SECRET_KEY }}
            DB_DEV_USER=${{ vars.DB_DEV_USER }}
            DB_DEV_PASSWORD=${{ vars.DB_DEV_PASSWORD }}
            DB_DEV_USER_NAME=${{ vars.DB_DEV_USER_NAME }}
            EOF
            docker compose pull
            docker compose up -d --force-recreate
            docker image prune -f

  build-notification-service:
    name: Build and Deploy Notification Service
    needs: detect-changes
    if: needs.detect-changes.outputs.notification_service == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./notification_service/package-lock.json

      - name: Install dependencies
        working-directory: ./notification_service
        run: npm ci

      - name: Build application
        working-directory: ./notification_service
        run: npm run build

      # - name: Run tests
      #   working-directory: ./notification_service
      #   run: npm test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./notification_service
          file: ./notification_service/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/notification-service:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/notification-service:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/notification-service:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/notification-service:buildcache,mode=max

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./notification_service/docker-compose.yml"
          target: "~/traffic_demo/"

      - name: Deploy to server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ~/traffic_demo/notification_service
            cd ~/traffic_demo/notification_service
            cat > .env <<EOF
            DB_TYPE=${{ vars.DB_TYPE }}
            DB_HOST=${{ vars.DB_HOST }}
            DB_PORT=${{ vars.DB_PORT }}
            DB_NAME=${{ vars.DB_NAME }}
            DB_USERNAME=${{ vars.DB_USERNAME }}
            DB_PASSWORD=${{ vars.DB_PASSWORD }}
            JWT_SECRET=${{ vars.JWT_SECRET }}
            JWT_REFRESH_SECRET=${{ vars.JWT_REFRESH_SECRET }}
            KAFKA_BROKER=${{ vars.KAFKA_BROKER }}
            DYNAMODB_ENDPOINT=${{ vars.DYNAMODB_ENDPOINT }}
            DYNAMODB_REGION=${{ vars.DYNAMODB_REGION }}
            DYNAMODB_ACCESS_KEY_ID=${{ vars.DYNAMODB_ACCESS_KEY_ID }}
            DYNAMODB_SECRET_ACCESS_KEY=${{ vars.DYNAMODB_SECRET_ACCESS_KEY }}
            DYNAMODB_TABLE_NAME=${{ vars.DYNAMODB_TABLE_NAME }}
            EOF
            docker compose pull
            docker compose up -d --force-recreate
            docker image prune -f

  build-routing-service:
    name: Build and Deploy Routing Service
    needs: detect-changes
    if: needs.detect-changes.outputs.routing_service == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: ./routing_service/requirements.txt

      - name: Install dependencies
        working-directory: ./routing_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # - name: Run tests
      #   working-directory: ./routing_service
      #   run: |
      #     pip install pytest pytest-asyncio
      #     pytest tests/ -v

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./routing_service
          file: ./routing_service/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/routing-service:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/routing-service:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/routing-service:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/routing-service:buildcache,mode=max

      - name: Copy docker-compose.yml and docker-entrypoint.sh app to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./routing_service/docker-compose.yml, ./routing_service/docker-entrypoint.sh"
          target: "~/traffic_demo/"

      - name: Deploy to server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ~/traffic_demo/routing_service
            cd ~/traffic_demo/routing_service
            cat > .env <<EOF
            SECRET_KEY=${{ vars.SECRET_KEY }}
            DB_DEV_USER=${{ vars.DB_DEV_USER }}
            DB_DEV_PASSWORD=${{ vars.DB_DEV_PASSWORD }}
            DB_DEV_ROUTING_NAME=${{ vars.DB_DEV_ROUTING_NAME }}
            DB_DEV_HOST=${{ vars.DB_DEV_HOST }}
            DB_DEV_PORT=${{ vars.DB_DEV_PORT }}
            TOMTOM_API_KEY=${{ vars.TOMTOM_API_KEY }}
            EOF
            docker compose pull
            docker compose up -d --force-recreate
            docker image prune -f

  build-traffic-service:
    name: Build and Deploy Traffic Service
    needs: detect-changes
    if: needs.detect-changes.outputs.traffic_service == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: ./traffic_service/requirements.txt

      - name: Install dependencies
        working-directory: ./traffic_service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir

      # - name: Run tests
      #   working-directory: ./traffic_service
      #   run: |
      #     pip install pytest pytest-asyncio
      #     pytest tests/ -v

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./traffic_service
          file: ./traffic_service/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/traffic-service:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/traffic-service:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/traffic-service:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/traffic-service:buildcache,mode=max

      - name: Copy docker-compose.yml and docker-entrypoint.sh app to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./traffic_service/docker-compose.yml, ./traffic_service/docker-entrypoint.sh"
          target: "~/traffic_demo/"

      - name: Deploy to server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ~/traffic_demo/traffic_service
            cd ~/traffic_demo/traffic_service
            cat > .env <<EOF
            SECRET_KEY=${{ vars.SECRET_KEY }}
            DB_DEV_USER=${{ vars.DB_DEV_USER }}
            DB_DEV_PASSWORD=${{ vars.DB_DEV_PASSWORD }}
            DB_DEV_TRAFFIC_NAME=${{ vars.DB_DEV_TRAFFIC_NAME }}
            DB_DEV_HOST=${{ vars.DB_DEV_HOST }}
            DB_DEV_PORT=${{ vars.DB_DEV_PORT }}
            EOF
            docker compose pull
            docker compose up -d --force-recreate
            docker image prune -f

  build-web-service:
    name: Build and Deploy Web Service
    needs: detect-changes
    if: needs.detect-changes.outputs.web_service == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./web_service/package-lock.json

      - name: Install dependencies
        working-directory: ./web_service
        run: npm ci

      - name: Build application
        working-directory: ./web_service
        run: npm run build
        env:
          NODE_ENV: production

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./web_service
          file: ./web_service/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/web-service:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/web-service:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/web-service:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/web-service:buildcache,mode=max

      - name: Copy docker-compose.yml and docker-entrypoint.sh app to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./web_service/docker-compose.yml, ./web_service/docker-entrypoint.sh"
          target: "~/traffic_demo/"

      - name: Deploy to server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ~/traffic_demo/web_service
            cd ~/traffic_demo/web_service
            docker compose pull
            docker compose up -d --force-recreate
            docker image prune -f

  build-kafka:
    name: Build and Deploy Kafka
    needs: detect-changes
    if: needs.detect-changes.outputs.kafka == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy start-kafka.sh to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./kafka/docker-compose.yml, ./kafka/start-kafka.sh"
          target: "~/traffic_demo/"

      - name: Deploy Kafka to server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ~/traffic_demo/kafka
            cd ~/traffic_demo/kafka
            docker compose up -d
